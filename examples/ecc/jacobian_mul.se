# Expected gas cost
#
# def expect(n, point_at_infinity=False):
#     n = n % (2**256 - 432420386565659656852420866394968145599)
#     if point_at_infinity:
#         return 79
#     if n == 0:
#         return 34479
#     L = int(1 + math.log(n) / math.log(2))
#     H = len([x for x in b.encode(n, 2) if x == '1'])
#     return 34221 + 94 * L + 343 * H

extern double: [double:[int256,int256,int256]:int256[]]
extern add: [add:[int256,int256,int256,int256,int256,int256]:int256[]]

data DOUBLE
data ADD

def init():
    self.DOUBLE = create('jacobian_double.se')
    self.ADD = create('jacobian_add.se')

def mul(ax, ay, az, n):
    n = mod(n, -432420386565659656852420866394968145599)
    if !ax * !ay + !n: # Constant-gas version of !axn and !ayn or !n
        return([0, 0, 1]:arr)
    with o = [0, 0, 1]:
        with b = 2 ^ 255:
            while gt(b, 0):
                if n & b:
                    o = self.DOUBLE.double(o[0], o[1], o[2], outitems=3)
                    o = self.ADD.add(o[0], o[1], o[2], ax, ay, az, outitems=3)
                else:
                    o = self.DOUBLE.double(o[0], o[1], o[2], outitems=3)
                b = div(b, 2)
            return(o:arr)
